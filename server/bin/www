#!/usr/bin/env node
/* eslint no-console: 0 */
const http = require('http');

const { app } = require('../app');
let { port } = require('../app');


function normalizePort(val) {
    const appPort = parseInt(val, 10);

    if (Number.isNaN(appPort)) {
        return val;
    }

    if (appPort >= 0) {
        return appPort;
    }

    return false;
}


function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    switch (error.code) {
    case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        process.exit(1);
        break;
    default:
        throw error;
    }
}


function onListening(server) {
    const addr = server.address();
    const uri = typeof addr === 'string' ? addr : `http://localhost:${addr.port}`;
    console.log(`Listening on ${uri}`);
}


port = normalizePort(port);
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', () => onListening(server));
